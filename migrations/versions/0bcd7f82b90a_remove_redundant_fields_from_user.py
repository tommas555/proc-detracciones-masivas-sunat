"""Remove redundant fields from User

Revision ID: 0bcd7f82b90a
Revises: 91d9b83424ef
Create Date: 2025-10-08 19:08:26.501382

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '0bcd7f82b90a'
down_revision = '91d9b83424ef'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('plan', schema=None) as batch_op:
        batch_op.alter_column('id',
               existing_type=sa.DateTime(),
               nullable=False,
               autoincrement=True)
        batch_op.alter_column('created_at',
               existing_type=sa.DateTime(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
        # LÍNEAS CORREGIDAS: Se añade un nombre a la restricción
        batch_op.create_unique_constraint('uq_plan_slug', ['slug'])
        batch_op.create_unique_constraint('uq_plan_name', ['name'])

    with op.batch_alter_table('plan_service_quota', schema=None) as batch_op:
        batch_op.alter_column('id',
               existing_type=sa.INTEGER(),
               nullable=False,
               autoincrement=True)
        batch_op.create_unique_constraint('unique_plan_service', ['plan_id', 'service_id'])

    with op.batch_alter_table('service', schema=None) as batch_op:
        batch_op.alter_column('id',
               existing_type=sa.INTEGER(),
               nullable=False,
               autoincrement=True)
        batch_op.alter_column('created_at',
               existing_type=sa.NUMERIC(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
        # LÍNEAS CORREGIDAS: Se añade un nombre a la restricción
        batch_op.create_unique_constraint('uq_service_slug', ['slug'])
        batch_op.create_unique_constraint('uq_service_name', ['name'])

    with op.batch_alter_table('service_error_log', schema=None) as batch_op:
        batch_op.alter_column('id',
               existing_type=sa.INTEGER(),
               nullable=False,
               autoincrement=True)
        batch_op.alter_column('occurred_at',
               existing_type=sa.NUMERIC(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)

    with op.batch_alter_table('service_usage_log', schema=None) as batch_op:
        batch_op.alter_column('id',
               existing_type=sa.INTEGER(),
               nullable=False,
               autoincrement=True)
        batch_op.alter_column('processing_time_seconds',
               existing_type=sa.REAL(),
               type_=sa.Float(),
               existing_nullable=True)
        batch_op.alter_column('started_at',
               existing_type=sa.NUMERIC(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
        batch_op.alter_column('completed_at',
               existing_type=sa.NUMERIC(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)

    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.drop_column('runs_quota')
        batch_op.drop_column('months_paid')
        batch_op.drop_column('last_payment_date')
        batch_op.drop_column('xml_used')
        batch_op.drop_column('xml_quota')
        batch_op.drop_column('subscription_end')
        batch_op.drop_column('runs_used')
        batch_op.drop_column('subscription_start')

    with op.batch_alter_table('user_plan_subscription', schema=None) as batch_op:
        batch_op.alter_column('id',
               existing_type=sa.INTEGER(),
               nullable=False,
               autoincrement=True)
        batch_op.alter_column('starts_at',
               existing_type=sa.NUMERIC(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
        batch_op.alter_column('ends_at',
               existing_type=sa.NUMERIC(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
        batch_op.alter_column('created_at',
               existing_type=sa.NUMERIC(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)

    # ### end Alembic commands ###
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('user_plan_subscription', schema=None) as batch_op:
        batch_op.alter_column('created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=sa.NUMERIC(),
               existing_nullable=True)
        batch_op.alter_column('ends_at',
               existing_type=sa.DateTime(timezone=True),
               type_=sa.NUMERIC(),
               existing_nullable=False)
        batch_op.alter_column('starts_at',
               existing_type=sa.DateTime(timezone=True),
               type_=sa.NUMERIC(),
               existing_nullable=False)
        batch_op.alter_column('id',
               existing_type=sa.INTEGER(),
               nullable=True,
               autoincrement=True)

    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.add_column(sa.Column('subscription_start', sa.DATETIME(), nullable=True))
        batch_op.add_column(sa.Column('runs_used', sa.INTEGER(), nullable=False))
        batch_op.add_column(sa.Column('subscription_end', sa.DATETIME(), nullable=True))
        batch_op.add_column(sa.Column('xml_quota', sa.INTEGER(), nullable=False))
        batch_op.add_column(sa.Column('xml_used', sa.INTEGER(), nullable=False))
        batch_op.add_column(sa.Column('last_payment_date', sa.DATETIME(), nullable=True))
        batch_op.add_column(sa.Column('months_paid', sa.INTEGER(), server_default=sa.text('0'), nullable=True))
        batch_op.add_column(sa.Column('runs_quota', sa.INTEGER(), nullable=False))

    with op.batch_alter_table('service_usage_log', schema=None) as batch_op:
        batch_op.alter_column('completed_at',
               existing_type=sa.DateTime(timezone=True),
               type_=sa.NUMERIC(),
               existing_nullable=True)
        batch_op.alter_column('started_at',
               existing_type=sa.DateTime(timezone=True),
               type_=sa.NUMERIC(),
               existing_nullable=True)
        batch_op.alter_column('processing_time_seconds',
               existing_type=sa.Float(),
               type_=sa.REAL(),
               existing_nullable=True)
        batch_op.alter_column('id',
               existing_type=sa.INTEGER(),
               nullable=True,
               autoincrement=True)

    with op.batch_alter_table('service_error_log', schema=None) as batch_op:
        batch_op.alter_column('occurred_at',
               existing_type=sa.DateTime(timezone=True),
               type_=sa.NUMERIC(),
               existing_nullable=True)
        batch_op.alter_column('id',
               existing_type=sa.INTEGER(),
               nullable=True,
               autoincrement=True)

    with op.batch_alter_table('service', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='unique')
        batch_op.drop_constraint(None, type_='unique')
        batch_op.alter_column('created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=sa.NUMERIC(),
               existing_nullable=True)
        batch_op.alter_column('id',
               existing_type=sa.INTEGER(),
               nullable=True,
               autoincrement=True)

    with op.batch_alter_table('plan_service_quota', schema=None) as batch_op:
        batch_op.drop_constraint('unique_plan_service', type_='unique')
        batch_op.alter_column('id',
               existing_type=sa.INTEGER(),
               nullable=True,
               autoincrement=True)

    with op.batch_alter_table('plan', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='unique')
        batch_op.drop_constraint(None, type_='unique')
        batch_op.alter_column('created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=sa.NUMERIC(),
               existing_nullable=True)
        batch_op.alter_column('id',
               existing_type=sa.INTEGER(),
               nullable=True,
               autoincrement=True)

    # ### end Alembic commands ###
